import { createSlice } from "@reduxjs/toolkit";

/**
 * Interface for the counter state.
 * @typedef {Object} CounterState
 * @property {number} value - The current value of the counter.
 */
interface CounterState {
  value: number;
}

/**
 * Represents a slice of the Redux store for managing the counter state.
 *
 * @remarks
 * The `counterSlice` object is created using the `createSlice` function from Redux Toolkit.
 * It defines the name, initial state, and reducers for the counter slice.
 *
 * @see {@link createSlice}
 */
const counterSlice = createSlice({
  /**
   * Name of the slice, used as the key in the root reducer.
   * @type {string}
   */
  name: "counter",

  /**
   * Initial state for this slice.
   * @type {CounterState}
   */
  initialState: { value: 0 } as CounterState,

  /**
   * Reducers to handle actions and update the state.
   */
  reducers: {
    /**
     * Increments the counter value.
     * @param {CounterState} state - The current state.
     */
    increment: (state) => {
      state.value += 1;
    },
    /**
     * Decrements the counter value.
     * @param {CounterState} state - The current state.
     */
    decrement: (state) => {
      state.value -= 1;
    },
    /**
     * Doubles the counter value.
     * @param {CounterState} state - The current state.
     */
    doubled: (state) => {
      state.value *= 2;
    },
    /**
     * Halves the counter value.
     * @param {CounterState} state - The current state.
     */
    half: (state) => {
      state.value /= 2;
    },
    /**
     * Resets the counter value to 0.
     * @param {CounterState} state - The current state.
     */
    reset: (state) => {
      state.value = 0;
    },
  },
});

/**
 * Export the action creators for increment, decrement, doubled, half, and reset.
 */
export const { increment, decrement, doubled, reset, half } =
  counterSlice.actions;

/**
 * Export the reducer function generated by createSlice as the default export of this module.
 */
export default counterSlice.reducer;
